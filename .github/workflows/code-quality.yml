name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit
    
    - name: Install Node.js dependencies
      working-directory: ./frontend
      run: npm ci
    
    # Python Code Quality Checks
    - name: Python Code Formatting (Black)
      working-directory: ./backend
      run: |
        echo "üîç Checking Python code formatting with Black..."
        black --check --diff . || (echo "‚ùå Code formatting issues found. Run 'black .' to fix." && exit 1)
    
    - name: Python Import Sorting (isort)
      working-directory: ./backend
      run: |
        echo "üîç Checking Python import sorting..."
        isort --check-only --diff . || (echo "‚ùå Import sorting issues found. Run 'isort .' to fix." && exit 1)
    
    - name: Python Linting (Flake8)
      working-directory: ./backend
      run: |
        echo "üîç Running Python linting..."
        flake8 . --max-line-length=88 --extend-ignore=E203,W503 --exclude=__pycache__,migrations,venv
    
    - name: Python Security Scan (Bandit)
      working-directory: ./backend
      run: |
        echo "üîç Running Python security scan..."
        bandit -r . -x tests/ -f json -o bandit-report.json || true
        bandit -r . -x tests/ || (echo "‚ö†Ô∏è  Security issues found, but continuing..." && exit 0)
    
    # Frontend Code Quality Checks
    - name: TypeScript/JavaScript Linting
      working-directory: ./frontend
      run: |
        echo "üîç Running TypeScript/JavaScript linting..."
        npm run lint
    
    - name: TypeScript Type Checking
      working-directory: ./frontend
      run: |
        echo "üîç Running TypeScript type checking..."
        npx tsc --noEmit
    
    # Documentation and Configuration Checks
    - name: Check Documentation
      run: |
        echo "üîç Checking documentation completeness..."
        
        # Check for required documentation files
        required_docs=(
          "README.md"
          "SECURITY.md"
          "docs/DEVELOPMENT.md"
        )
        
        for doc in "${required_docs[@]}"; do
          if [ -f "$doc" ]; then
            echo "‚úÖ Found: $doc"
          else
            echo "‚ùå Missing: $doc"
            exit 1
          fi
        done
    
    - name: Validate Configuration Files
      run: |
        echo "üîç Validating configuration files..."
        
        # Check JSON files
        find . -name "*.json" -not -path "./node_modules/*" -not -path "./.git/*" | while read -r file; do
          echo "Validating JSON: $file"
          python -m json.tool "$file" > /dev/null || (echo "‚ùå Invalid JSON: $file" && exit 1)
        done
        
        # Check YAML files
        find . -name "*.yml" -o -name "*.yaml" | grep -v node_modules | while read -r file; do
          echo "Validating YAML: $file"
          python -c "import yaml; yaml.safe_load(open('$file'))" || (echo "‚ùå Invalid YAML: $file" && exit 1)
        done
        
        echo "‚úÖ All configuration files are valid"
    
    - name: Check Environment Configuration
      run: |
        echo "üîç Checking environment configuration..."
        
        # Check for required environment files
        if [ -f "backend/.env.example" ]; then
          echo "‚úÖ Found backend/.env.example"
        else
          echo "‚ö†Ô∏è  Missing backend/.env.example - consider adding one"
        fi
        
        if [ -f "frontend/.env.example" ]; then
          echo "‚úÖ Found frontend/.env.example"
        else
          echo "‚ö†Ô∏è  Missing frontend/.env.example - consider adding one"
        fi
        
        # Check render.yaml
        if [ -f "render.yaml" ]; then
          echo "‚úÖ Found render.yaml deployment configuration"
        else
          echo "‚ùå Missing render.yaml deployment configuration"
          exit 1
        fi
    
    - name: Dependency Vulnerability Check
      run: |
        echo "üîç Checking for dependency vulnerabilities..."
        
        # Check Python dependencies
        echo "Checking Python dependencies..."
        cd backend
        pip install safety
        safety check || (echo "‚ö†Ô∏è  Python dependency vulnerabilities found" && exit 0)
        cd ..
        
        # Check Node.js dependencies
        echo "Checking Node.js dependencies..."
        cd frontend
        npm audit --audit-level=high || (echo "‚ö†Ô∏è  Node.js dependency vulnerabilities found" && exit 0)
        cd ..
    
    - name: Code Quality Summary
      if: always()
      run: |
        echo "üìä Code Quality Check Summary"
        echo "============================="
        echo "‚úÖ Python formatting and linting completed"
        echo "‚úÖ TypeScript type checking completed"
        echo "‚úÖ Configuration files validated"
        echo "‚úÖ Documentation structure verified"
        echo "‚úÖ Dependency security scan completed"
        echo ""
        echo "üéØ Code quality standards maintained!"
