name: API Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Environment to test against'
        required: true
        default: 'local'
        type: choice
        options:
          - local
          - staging
          - production

jobs:
  api-integration-tests:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: testpassword
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio requests
    
    - name: Set up test environment
      run: |
        echo "üîß Setting up test environment..."
        
        # Create test environment file
        cat > backend/.env.test << EOF
        FLASK_ENV=testing
        SECRET_KEY=test-secret-key-for-testing
        JWT_SECRET_KEY=test-jwt-secret-key
        MONGO_URI=mongodb://test:testpassword@localhost:27017/coreconnect_test?authSource=admin
        MONGO_DBNAME=coreconnect_test
        BCRYPT_ROUNDS=4
        RATE_LIMIT_PER_MINUTE=1000
        MAX_LOGIN_ATTEMPTS=10
        LOCKOUT_DURATION=60
        EOF
    
    - name: Start backend server
      run: |
        echo "üöÄ Starting backend server for testing..."
        cd backend
        export FLASK_ENV=testing
        python app.py &
        SERVER_PID=$!
        echo $SERVER_PID > server.pid
        
        # Wait for server to start
        max_attempts=30
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          if curl -f http://localhost:5000/health > /dev/null 2>&1; then
            echo "‚úÖ Backend server started successfully"
            break
          else
            echo "‚è≥ Waiting for server to start... (attempt $((attempt + 1)))"
            sleep 2
            attempt=$((attempt + 1))
          fi
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "‚ùå Backend server failed to start"
          kill $SERVER_PID || true
          exit 1
        fi
    
    - name: Run API Health Tests
      run: |
        echo "üß™ Running API health tests..."
        
        # Test basic health endpoint
        echo "Testing /health endpoint..."
        health_response=$(curl -s http://localhost:5000/health)
        echo "Health response: $health_response"
        
        if echo "$health_response" | grep -q '"status":"success"'; then
          echo "‚úÖ Health endpoint working"
        else
          echo "‚ùå Health endpoint failed"
          exit 1
        fi
        
        # Test API health endpoint
        echo "Testing /api/health endpoint..."
        api_health_response=$(curl -s http://localhost:5000/api/health)
        echo "API health response: $api_health_response"
        
        if echo "$api_health_response" | grep -q '"status":"success"'; then
          echo "‚úÖ API health endpoint working"
        else
          echo "‚ùå API health endpoint failed"
          exit 1
        fi
    
    - name: Run Authentication Tests
      run: |
        echo "üîê Running authentication tests..."
        
        # Test registration endpoint with invalid data
        echo "Testing registration with invalid data..."
        reg_invalid=$(curl -s -w "%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -d '{}' \
          http://localhost:5000/api/auth/register)
        
        reg_code=$(echo "$reg_invalid" | tail -n1)
        if [ "$reg_code" = "400" ] || [ "$reg_code" = "422" ]; then
          echo "‚úÖ Registration validation working (HTTP $reg_code)"
        else
          echo "‚ùå Registration validation failed (HTTP $reg_code)"
          exit 1
        fi
        
        # Test login endpoint with invalid data
        echo "Testing login with invalid data..."
        login_invalid=$(curl -s -w "%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -d '{}' \
          http://localhost:5000/api/auth/login)
        
        login_code=$(echo "$login_invalid" | tail -n1)
        if [ "$login_code" = "400" ] || [ "$login_code" = "422" ]; then
          echo "‚úÖ Login validation working (HTTP $login_code)"
        else
          echo "‚ùå Login validation failed (HTTP $login_code)"
          exit 1
        fi
    
    - name: Run CORS Tests
      run: |
        echo "üåê Running CORS tests..."
        
        # Test CORS preflight request
        echo "Testing CORS preflight..."
        cors_response=$(curl -s -I -X OPTIONS \
          -H "Origin: https://core-connect-seven.vercel.app" \
          -H "Access-Control-Request-Method: POST" \
          -H "Access-Control-Request-Headers: Content-Type" \
          http://localhost:5000/api/auth/login)
        
        if echo "$cors_response" | grep -i "access-control-allow-origin"; then
          echo "‚úÖ CORS preflight working"
        else
          echo "‚ùå CORS preflight failed"
          echo "CORS response: $cors_response"
          exit 1
        fi
    
    - name: Run Performance Tests
      run: |
        echo "‚ö° Running performance tests..."
        
        # Test response times
        echo "Testing response times..."
        
        for endpoint in "/" "/health" "/api/health"; do
          echo "Testing $endpoint..."
          
          response_time=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:5000$endpoint)
          response_time_ms=$(echo "$response_time * 1000" | bc -l | cut -d. -f1)
          
          echo "Response time for $endpoint: ${response_time_ms}ms"
          
          if [ "$response_time_ms" -lt 1000 ]; then
            echo "‚úÖ $endpoint performance good (${response_time_ms}ms)"
          elif [ "$response_time_ms" -lt 3000 ]; then
            echo "‚ö†Ô∏è  $endpoint performance acceptable (${response_time_ms}ms)"
          else
            echo "‚ùå $endpoint performance poor (${response_time_ms}ms)"
            exit 1
          fi
        done
    
    - name: Run Database Connectivity Tests
      run: |
        echo "üóÑÔ∏è  Running database connectivity tests..."
        
        # Test database status endpoint
        db_status=$(curl -s http://localhost:5000/api/status)
        echo "Database status response: $db_status"
        
        if echo "$db_status" | grep -q '"status":"success"'; then
          echo "‚úÖ Database connectivity working"
        else
          echo "‚ùå Database connectivity failed"
          exit 1
        fi
    
    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up test environment..."
        
        # Stop backend server
        if [ -f "backend/server.pid" ]; then
          SERVER_PID=$(cat backend/server.pid)
          kill $SERVER_PID || true
          rm backend/server.pid
          echo "‚úÖ Backend server stopped"
        fi
        
        # Clean up test files
        rm -f backend/.env.test
    
    - name: API Test Summary
      if: always()
      run: |
        echo "üìä API Integration Test Summary"
        echo "==============================="
        echo "‚úÖ Health endpoints tested"
        echo "‚úÖ Authentication endpoints tested"
        echo "‚úÖ CORS configuration tested"
        echo "‚úÖ Performance benchmarks completed"
        echo "‚úÖ Database connectivity verified"
        echo ""
        if [ "${{ job.status }}" = "success" ]; then
          echo "üéâ All API integration tests passed!"
        else
          echo "‚ùå Some API integration tests failed"
        fi
